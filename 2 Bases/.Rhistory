#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("plano-saude2.csv")
#Pode usar para regressão linear, polinomial..
library(h2o)
h2o.init(nthreads = -1)
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("plano-saude2.csv")
#Pode usar para regressão linear, polinomial..
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = "custo", training_frame = as.h2o(base), activation = "Rectifier",
hidden = c(100,100), epochs = 100)
summary(regressor)
previsoes = h2o.predict(regressor, newdata = base[-2])
previsoes = h2o.predict(regressor, newdata = as.h2o(base[-2]))
library(miscTools)
cc = rSquared(base[["custo"]], resid = base[["custo"]] - previsoes)
previsoes = as.vector(previsoes)
library(miscTools)
cc = rSquared(base[["custo"]], resid = base[["custo"]] - previsoes)
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("plano-saude2.csv")
#Pode usar para regressão linear, polinomial..
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = "custo", training_frame = as.h2o(base), activation = "Rectifier",
hidden = c(100,100), epochs = 1000)
summary(regressor)
previsoes = h2o.predict(regressor, newdata = as.h2o(base[-2]))
previsoes = as.vector(previsoes)
library(miscTools)
cc = rSquared(base[["custo"]], resid = base[["custo"]] - previsoes)
ggplot () + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(base$idade, y = previsoes), colour = "red")
library(ggplot2)
ggplot () + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_line(aes(base$idade, y = previsoes), colour = "red")
ggplot () + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(base$idade, y = previsoes), colour = "red")
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
#Definindo proporções das bases de teste e aprendizagem
set.seed(1)
divisao <- sample.split(base$price, SplitRatio = 0.70)
#Definindo base de treinamento#
base_treinamento <- subset(base, divisao == TRUE )
#Definindo base de teste#
base_teste <- subset(base, divisao == FALSE )
#Regressor
library(h2o)
h2o.init(nthreads = -1)
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
#Definindo proporções das bases de teste e aprendizagem
set.seed(1)
divisao <- sample.split(base$price, SplitRatio = 0.70)
#Definindo base de treinamento#
base_treinamento <- subset(base, divisao == TRUE )
#Definindo base de teste#
base_teste <- subset(base, divisao == FALSE )
#Regressor
library(h2o)
h2o.init(nthreads = -1)
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
#Definindo proporções das bases de teste e aprendizagem
set.seed(1)
divisao <- sample.split(base$price, SplitRatio = 0.70)
#Definindo base de treinamento#
base_treinamento <- subset(base, divisao == TRUE )
#Definindo base de teste#
base_teste <- subset(base, divisao == FALSE )
#Regressor
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = price ~ ., training_frame = as.h2o(base_treinamento), activation = "Rectifier",
hidden = c("100", "100"), epochs = 100)
#Regressor
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = price ~ ., training_frame = as.h2o(base_treinamento), activation = "Rectifier",
hidden = c(100, 100), epochs = 100)
#Regressor
library(h2o)
h2o.init(nthreads = -1)
#Regressor
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = price, training_frame = as.h2o(base_treinamento), activation = "Rectifier",
hidden = c(100, 100), epochs = 100)
regressor = h2o.deeplearning(y = "price", training_frame = as.h2o(base_treinamento), activation = "Rectifier",
hidden = c(100, 100), epochs = 100)
#Previsões
previsoes_treinamento = predict(regressor, newdata = as.h2o(base_treinamento[-1]))
previsoes_treinamento = as.vector(previsoes_treinamento)
library(miscTools)
cr = rSquared(base_treinamento[["price"]], resid = base_treinamento[["price"]] - previsoes_treinamento)
previsoes_teste = predict(regressor, newdata = as.h2o(base_teste[-1]))
mean(abs(base_teste[["price"]] - previsoes_teste))
previsoes_teste = as.vector(previsoes_teste)
mean(abs(base_teste[["price"]] - previsoes_teste))
cr = rSquared(base_teste[["price"]], resid = base_teste[["price"]] - previsoes_teste)
rm(list = all)
rm(list = ())
rm(rm = ls())
rm(list = ls())
rm(list = ls())
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
View(base)
rm(list = ls())
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("plano-saude2.csv")
#Pode usar para regressão linear, polinomial..
library(h2o)
h2o.init(nthreads = -1)
rm(list = ls())
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("plano-saude2.csv")
#Pode usar para regressão linear, polinomial..
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = "custo", training_frame = as.h2o(base), activation = "Rectifier",
hidden = c(100,100), epochs = 1000)
summary(regressor)
previsoes = h2o.predict(regressor, newdata = as.h2o(base[-2]))
previsoes = as.vector(previsoes)
cc = rSquared(base[["custo"]], resid = base[["custo"]] - previsoes)
library(ggplot2)
ggplot () + geom_point(aes(x = base$idade, y = base$custo), colour = 'blue') +
geom_point(aes(base$idade, y = previsoes), colour = "red")
rm(list = ls())
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
rm(list = ls())
#Definindo Diretório#
setwd("C:/Users/rafae/Desktop/Ciência de Dados/4 Material de estudos/1 Curso Machine learning - Udemy/2 Bases")
#Importando a base#
base = read.csv("house-prices.csv")
base$id = NULL
base$date = NULL
base$sqft_living15 = NULL
base$sqft_lot15 = NULL
base$sqft_basement = NULL
library("caTools")
#Definindo proporções das bases de teste e aprendizagem
set.seed(1)
divisao <- sample.split(base$price, SplitRatio = 0.70)
#Definindo base de treinamento#
base_treinamento <- subset(base, divisao == TRUE )
#Definindo base de teste#
base_teste <- subset(base, divisao == FALSE )
#Regressor
library(h2o)
h2o.init(nthreads = -1)
regressor = h2o.deeplearning(y = "price", training_frame = as.h2o(base_treinamento), activation = "Rectifier",
hidden = c(100, 100), epochs = 100)
#Previsões
previsoes_treinamento = predict(regressor, newdata = as.h2o(base_treinamento[-1]))
previsoes_treinamento = as.vector(previsoes_treinamento)
library(miscTools)
cr = rSquared(base_treinamento[["price"]], resid = base_treinamento[["price"]] - previsoes_treinamento)
previsoes_teste = predict(regressor, newdata = as.h2o(base_teste[-1]))
previsoes_teste = as.vector(previsoes_teste)
mean(abs(base_teste[["price"]] - previsoes_teste))
cr = rSquared(base_teste[["price"]], resid = base_teste[["price"]] - previsoes_teste)
